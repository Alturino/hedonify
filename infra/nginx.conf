# https://github.com/denji/nginx-tuning

# you must set worker processes based on your CPU cores, nginx does not benefit from setting more than that
worker_processes auto; #some last versions calculate it automatically

# number of file descriptors used for nginx
# the limit for the maximum FDs on the server is usually set by the OS.
# if you don't set FD's then OS settings will be used which is by default 2000
worker_rlimit_nofile 4000;

# only log critical errors
error_log /var/log/nginx/error.log warn;

# provides the configuration file context in which the directives that affect connection processing are specified.
events {
    # determines how much clients will be served per worker
    # max clients = worker_connections * worker_processes
    # max clients is also limited by the number of socket connections available on the system (~64k)
    worker_connections 4000;

    # optimized to serve many clients with each thread, essential for linux -- for testing environment
    use epoll;

    # accept as many connections as possible, may flood worker connections if set too low -- for testing environment
    multi_accept on;
}

http {
    # cache informations about FDs, frequently accessed files
    # can boost performance, but you need to test those values
    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # to boost I/O on HDD we can disable access logs
    log_format json escape=json '{"level":"info","ts":"$time_iso8601","message":"handled request $request_method $request_uri","request":{"id":"$http_x_request_id","remote_ip":"$remote_addr","remote_port":"$remote_port","protocol":"$server_protocol","method":"$request_method","host":"$host","uri":"$request_uri","headers":{"user-agent":"$http_user_agent","accept":"$http_accept","accept-encoding":"$http_accept_encoding","traceparent":"$http_traceparent","tracestate":"$http_tracestate"}},"bytes_read":$request_length,"duration_msecs":$request_time,"size":$bytes_sent,"status":$status,"resp_headers":{"content_length":"$sent_http_content_length","content_type":"$sent_http_content_type"}}';
    access_log /var/log/nginx/access.log json;

    # copies data between one FD and other from within the kernel
    # faster than read() + write()
    sendfile on;

    # send headers in one piece, it is better than sending them one by one
    tcp_nopush on;

    # don't buffer data sent, good for small data bursts in real time
    tcp_nodelay on;

    # allow the server to close connection on non responding client, this will free up memory
    reset_timedout_connection on;

    # request timed out -- default 60
    client_body_timeout 10;

    # if client stop responding, free up memory -- default 60
    send_timeout 2;

    # server will close connection after this time -- default 75
    keepalive_timeout 30;

    server {
        location  /users {
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_pass http://user-service/users;
        }
        location  /products {
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_pass http://product-service/products;
        }
        location  /orders {
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_pass http://order-service/orders;
        }
        location /carts {
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_pass http://cart-service/carts;
        }
    }
}
