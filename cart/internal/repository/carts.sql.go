// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: carts.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const deleteCartByIdAndUserId = `-- name: DeleteCartByIdAndUserId :one
delete from carts
where id = $1 and user_id = $2 returning id, user_id, created_at, updated_at
`

type DeleteCartByIdAndUserIdParams struct {
	ID     uuid.UUID `db:"id" json:"id"`
	UserID uuid.UUID `db:"user_id" json:"user_id"`
}

func (q *Queries) DeleteCartByIdAndUserId(ctx context.Context, arg DeleteCartByIdAndUserIdParams) (Cart, error) {
	row := q.db.QueryRow(ctx, deleteCartByIdAndUserId, arg.ID, arg.UserID)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCartItemFromCartsById = `-- name: DeleteCartItemFromCartsById :one
delete from cart_items
where id = $1 and cart_id = $2 returning id, cart_id, product_id, quantity, price, created_at, updated_at
`

type DeleteCartItemFromCartsByIdParams struct {
	ID     uuid.UUID `db:"id" json:"id"`
	CartID uuid.UUID `db:"cart_id" json:"cart_id"`
}

func (q *Queries) DeleteCartItemFromCartsById(ctx context.Context, arg DeleteCartItemFromCartsByIdParams) (CartItem, error) {
	row := q.db.QueryRow(ctx, deleteCartItemFromCartsById, arg.ID, arg.CartID)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.ProductID,
		&i.Quantity,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findCartById = `-- name: FindCartById :one
select
    c.id, c.user_id, c.created_at, c.updated_at,
    json_agg(to_json(ci.*)) as cart_items
from users as u
inner join carts as c on u.id = c.user_id
inner join cart_items as ci on c.id = ci.cart_id
where u.id = $1 and c.id = $2
group by c.id, c.user_id, c.created_at, c.updated_at
`

type FindCartByIdParams struct {
	ID   uuid.UUID `db:"id" json:"id"`
	ID_2 uuid.UUID `db:"id_2" json:"id_2"`
}

type FindCartByIdRow struct {
	ID        uuid.UUID          `db:"id" json:"id"`
	UserID    uuid.UUID          `db:"user_id" json:"user_id"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	CartItems []byte             `db:"cart_items" json:"cart_items"`
}

func (q *Queries) FindCartById(ctx context.Context, arg FindCartByIdParams) (FindCartByIdRow, error) {
	row := q.db.QueryRow(ctx, findCartById, arg.ID, arg.ID_2)
	var i FindCartByIdRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CartItems,
	)
	return i, err
}

const findCartByUserId = `-- name: FindCartByUserId :many
select
    c.id, c.user_id, c.created_at, c.updated_at,
    to_json(ci.*) as cart_items
from users as u
inner join carts as c on u.id = c.user_id
inner join cart_items as ci on c.id = ci.cart_id
where u.id = $1
`

type FindCartByUserIdRow struct {
	ID        uuid.UUID          `db:"id" json:"id"`
	UserID    uuid.UUID          `db:"user_id" json:"user_id"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	CartItems []byte             `db:"cart_items" json:"cart_items"`
}

func (q *Queries) FindCartByUserId(ctx context.Context, id uuid.UUID) ([]FindCartByUserIdRow, error) {
	rows, err := q.db.Query(ctx, findCartByUserId, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindCartByUserIdRow
	for rows.Next() {
		var i FindCartByUserIdRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CartItems,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findCartItemByCartId = `-- name: FindCartItemByCartId :many
select id, cart_id, product_id, quantity, price, created_at, updated_at from cart_items
where cart_id = $1
`

func (q *Queries) FindCartItemByCartId(ctx context.Context, cartID uuid.UUID) ([]CartItem, error) {
	rows, err := q.db.Query(ctx, findCartItemByCartId, cartID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CartItem
	for rows.Next() {
		var i CartItem
		if err := rows.Scan(
			&i.ID,
			&i.CartID,
			&i.ProductID,
			&i.Quantity,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findCartItemById = `-- name: FindCartItemById :one
select id, cart_id, product_id, quantity, price, created_at, updated_at from cart_items
where id = $1
`

func (q *Queries) FindCartItemById(ctx context.Context, id uuid.UUID) (CartItem, error) {
	row := q.db.QueryRow(ctx, findCartItemById, id)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.ProductID,
		&i.Quantity,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertCart = `-- name: InsertCart :one
insert into carts (user_id) values ($1) returning id, user_id, created_at, updated_at
`

func (q *Queries) InsertCart(ctx context.Context, userID uuid.UUID) (Cart, error) {
	row := q.db.QueryRow(ctx, insertCart, userID)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertCartItem = `-- name: InsertCartItem :one
insert into cart_items (id, cart_id, product_id, quantity, price) values (
    $1, $2, $3, $4, $5
) returning id, cart_id, product_id, quantity, price, created_at, updated_at
`

type InsertCartItemParams struct {
	ID        uuid.UUID      `db:"id" json:"id"`
	CartID    uuid.UUID      `db:"cart_id" json:"cart_id"`
	ProductID uuid.UUID      `db:"product_id" json:"product_id"`
	Quantity  int32          `db:"quantity" json:"quantity"`
	Price     pgtype.Numeric `db:"price" json:"price"`
}

func (q *Queries) InsertCartItem(ctx context.Context, arg InsertCartItemParams) (CartItem, error) {
	row := q.db.QueryRow(ctx, insertCartItem,
		arg.ID,
		arg.CartID,
		arg.ProductID,
		arg.Quantity,
		arg.Price,
	)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.ProductID,
		&i.Quantity,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

type InsertCartItemsParams struct {
	ID        uuid.UUID      `db:"id" json:"id"`
	CartID    uuid.UUID      `db:"cart_id" json:"cart_id"`
	ProductID uuid.UUID      `db:"product_id" json:"product_id"`
	Quantity  int32          `db:"quantity" json:"quantity"`
	Price     pgtype.Numeric `db:"price" json:"price"`
}
