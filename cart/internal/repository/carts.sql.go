// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: carts.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const deleteCartItemFromCartsById = `-- name: DeleteCartItemFromCartsById :one
delete from cart_items where id = $1 and cart_id = $2 returning id, cart_id, product_id, quantity, price, created_at, updated_at
`

type DeleteCartItemFromCartsByIdParams struct {
	ID     uuid.UUID `json:"id"`
	CartID uuid.UUID `json:"cart_id"`
}

func (q *Queries) DeleteCartItemFromCartsById(ctx context.Context, arg DeleteCartItemFromCartsByIdParams) (CartItem, error) {
	row := q.db.QueryRow(ctx, deleteCartItemFromCartsById, arg.ID, arg.CartID)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.ProductID,
		&i.Quantity,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findCartById = `-- name: FindCartById :one
select id, user_id, created_at, updated_at from carts where id = $1
`

func (q *Queries) FindCartById(ctx context.Context, id uuid.UUID) (Cart, error) {
	row := q.db.QueryRow(ctx, findCartById, id)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findCartByUserId = `-- name: FindCartByUserId :many
select id, user_id, created_at, updated_at from carts where user_id = $1
`

func (q *Queries) FindCartByUserId(ctx context.Context, userID uuid.UUID) ([]Cart, error) {
	rows, err := q.db.Query(ctx, findCartByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cart
	for rows.Next() {
		var i Cart
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findCartItemById = `-- name: FindCartItemById :one
select id, cart_id, product_id, quantity, price, created_at, updated_at from cart_items where id = $1
`

func (q *Queries) FindCartItemById(ctx context.Context, id uuid.UUID) (CartItem, error) {
	row := q.db.QueryRow(ctx, findCartItemById, id)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.ProductID,
		&i.Quantity,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertCart = `-- name: InsertCart :one
insert into carts (user_id) values ($1) returning id, user_id, created_at, updated_at
`

func (q *Queries) InsertCart(ctx context.Context, userID uuid.UUID) (Cart, error) {
	row := q.db.QueryRow(ctx, insertCart, userID)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

type InsertCartItemParams struct {
	CartID    uuid.UUID      `json:"cart_id"`
	ProductID uuid.UUID      `json:"product_id"`
	Quantity  int32          `json:"quantity"`
	Price     pgtype.Numeric `json:"price"`
}
