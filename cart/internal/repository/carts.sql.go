// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: carts.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const findCartById = `-- name: FindCartById :one
select id, user_id, total_price, created_at, updated_at from carts where id = $1
`

func (q *Queries) FindCartById(ctx context.Context, id uuid.UUID) (Cart, error) {
	row := q.queryRow(ctx, q.findCartByIdStmt, findCartById, id)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TotalPrice,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findCartByUserId = `-- name: FindCartByUserId :many
select id, user_id, total_price, created_at, updated_at from carts where user_id = $1
`

func (q *Queries) FindCartByUserId(ctx context.Context, userID uuid.UUID) ([]Cart, error) {
	rows, err := q.query(ctx, q.findCartByUserIdStmt, findCartByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cart
	for rows.Next() {
		var i Cart
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TotalPrice,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertCart = `-- name: InsertCart :one
insert into carts (user_id, total_price) values ($1, $2) returning id, user_id, total_price, created_at, updated_at
`

type InsertCartParams struct {
	UserID     uuid.UUID `json:"user_id"`
	TotalPrice string    `json:"total_price"`
}

func (q *Queries) InsertCart(ctx context.Context, arg InsertCartParams) (Cart, error) {
	row := q.queryRow(ctx, q.insertCartStmt, insertCart, arg.UserID, arg.TotalPrice)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TotalPrice,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
