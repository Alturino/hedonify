// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: products.sql

package repository

import (
	"context"
)

const getProducts = `-- name: GetProducts :many
select id, product_name, price, created_at, updated_at from products
`

func (q *Queries) GetProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.query(ctx, q.getProductsStmt, getProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.ProductName,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertProduct = `-- name: InsertProduct :one
insert into products (product_name, price) values ($1, $2) returning id, product_name, price, created_at, updated_at
`

type InsertProductParams struct {
	ProductName string `json:"product_name"`
	Price       string `json:"price"`
}

func (q *Queries) InsertProduct(ctx context.Context, arg InsertProductParams) (Product, error) {
	row := q.queryRow(ctx, q.insertProductStmt, insertProduct, arg.ProductName, arg.Price)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.ProductName,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
