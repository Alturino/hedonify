// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: orders.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const deleteOrderItemFromOrdersById = `-- name: DeleteOrderItemFromOrdersById :one
delete from order_items where id = $1 returning id, order_id, product_id, quantity, price, created_at, updated_at
`

func (q *Queries) DeleteOrderItemFromOrdersById(ctx context.Context, id uuid.UUID) (OrderItem, error) {
	row := q.db.QueryRow(ctx, deleteOrderItemFromOrdersById, id)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findOrderById = `-- name: FindOrderById :one
select o.id, o.user_id, o.created_at, o.updated_at
from orders as o
inner join order_items as oi on o.id = oi.order_id
where o.id = $1
`

func (q *Queries) FindOrderById(ctx context.Context, id uuid.UUID) (Order, error) {
	row := q.db.QueryRow(ctx, findOrderById, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findOrderByIdAndUserId = `-- name: FindOrderByIdAndUserId :many
select o.id, o.user_id, o.created_at, o.updated_at
from orders as o
inner join order_items as oi on o.id = oi.order_id
where
    id = coalesce(nullif($1, ''), $1, id) and user_id = coalesce(nullif($2, ''), $2, user_id)
`

type FindOrderByIdAndUserIdParams struct {
	Column1 interface{} `json:"column_1"`
	Column2 interface{} `json:"column_2"`
}

func (q *Queries) FindOrderByIdAndUserId(ctx context.Context, arg FindOrderByIdAndUserIdParams) ([]Order, error) {
	rows, err := q.db.Query(ctx, findOrderByIdAndUserId, arg.Column1, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findOrderByUserId = `-- name: FindOrderByUserId :many
select id, user_id, created_at, updated_at from orders where user_id = $1
`

func (q *Queries) FindOrderByUserId(ctx context.Context, userID uuid.UUID) ([]Order, error) {
	rows, err := q.db.Query(ctx, findOrderByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findOrderItemById = `-- name: FindOrderItemById :many
select oi.id, oi.order_id, oi.product_id, oi.quantity, oi.price, oi.created_at, oi.updated_at
from orders as o
inner join order_items as oi on o.id = oi.order_id
where o.id = $1
`

func (q *Queries) FindOrderItemById(ctx context.Context, id uuid.UUID) ([]OrderItem, error) {
	rows, err := q.db.Query(ctx, findOrderItemById, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderItem
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.ProductID,
			&i.Quantity,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findOrderItemByIdAndUserId = `-- name: FindOrderItemByIdAndUserId :many
select oi.id, oi.order_id, oi.product_id, oi.quantity, oi.price, oi.created_at, oi.updated_at
from orders as o
inner join order_items as oi on o.id = oi.order_id
where
    id = coalesce(nullif($1, ''), $1, id) and user_id = coalesce(nullif($2, ''), $2, user_id)
`

type FindOrderItemByIdAndUserIdParams struct {
	Column1 interface{} `json:"column_1"`
	Column2 interface{} `json:"column_2"`
}

func (q *Queries) FindOrderItemByIdAndUserId(ctx context.Context, arg FindOrderItemByIdAndUserIdParams) ([]OrderItem, error) {
	rows, err := q.db.Query(ctx, findOrderItemByIdAndUserId, arg.Column1, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderItem
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.ProductID,
			&i.Quantity,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertOrder = `-- name: InsertOrder :one
insert into orders (id, user_id) values ($1, $2) returning id, user_id, created_at, updated_at
`

type InsertOrderParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) InsertOrder(ctx context.Context, arg InsertOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, insertOrder, arg.ID, arg.UserID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

type InsertOrderItemParams struct {
	OrderID   uuid.UUID      `json:"order_id"`
	ProductID uuid.UUID      `json:"product_id"`
	Quantity  int32          `json:"quantity"`
	Price     pgtype.Numeric `json:"price"`
}
