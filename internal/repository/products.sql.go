// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: products.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const deleteProduct = `-- name: DeleteProduct :one
delete from products
where id = $1 returning id, name, price, quantity, created_at, updated_at
`

func (q *Queries) DeleteProduct(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRow(ctx, deleteProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findProductById = `-- name: FindProductById :one
select id, name, price, quantity, created_at, updated_at from products
where id = $1
`

func (q *Queries) FindProductById(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRow(ctx, findProductById, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findProductByName = `-- name: FindProductByName :one
select id, name, price, quantity, created_at, updated_at from products
where name = $1
`

func (q *Queries) FindProductByName(ctx context.Context, name string) (Product, error) {
	row := q.db.QueryRow(ctx, findProductByName, name)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findProducts = `-- name: FindProducts :many
select id, name, price, quantity, created_at, updated_at from products
`

func (q *Queries) FindProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.Query(ctx, findProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.Quantity,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findProductsByIds = `-- name: FindProductsByIds :many
select id, name, price, quantity, created_at, updated_at from products
where id = any($1::uuid [])
`

func (q *Queries) FindProductsByIds(ctx context.Context, dollar_1 []uuid.UUID) ([]Product, error) {
	rows, err := q.db.Query(ctx, findProductsByIds, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.Quantity,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProducts = `-- name: GetProducts :many
select id, name, price, quantity, created_at, updated_at from products
`

func (q *Queries) GetProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.Quantity,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertProduct = `-- name: InsertProduct :one
insert into products (name, price, quantity) values ($1, $2, $3) returning id, name, price, quantity, created_at, updated_at
`

type InsertProductParams struct {
	Name     string         `db:"name" json:"name"`
	Price    pgtype.Numeric `db:"price" json:"price"`
	Quantity int32          `db:"quantity" json:"quantity"`
}

func (q *Queries) InsertProduct(ctx context.Context, arg InsertProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, insertProduct, arg.Name, arg.Price, arg.Quantity)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProduct = `-- name: UpdateProduct :one
update products set name = $1, price = $2, quantity = $3, updated_at = now()
where id = $4 returning id, name, price, quantity, created_at, updated_at
`

type UpdateProductParams struct {
	Name     string         `db:"name" json:"name"`
	Price    pgtype.Numeric `db:"price" json:"price"`
	Quantity int32          `db:"quantity" json:"quantity"`
	ID       uuid.UUID      `db:"id" json:"id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct,
		arg.Name,
		arg.Price,
		arg.Quantity,
		arg.ID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProductQuantity = `-- name: UpdateProductQuantity :one
update products set quantity = $2
where id = $1 returning id, name, price, quantity, created_at, updated_at
`

type UpdateProductQuantityParams struct {
	ID       uuid.UUID `db:"id" json:"id"`
	Quantity int32     `db:"quantity" json:"quantity"`
}

func (q *Queries) UpdateProductQuantity(ctx context.Context, arg UpdateProductQuantityParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProductQuantity, arg.ID, arg.Quantity)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
